@mixin default_break(){
	*{margin:0;padding:0;background:transparent;text-decoration:none;font-style:normal;}
	img{vertical-align:bottom;border:none;}
	html{-webkit-text-size-adjust:100%;text-size-adjust:100%;}
}
@mixin hide_scrollbar(){
	-ms-overflow-style: none;
	scrollbar-width: none;
	&::-webkit-scrollbar{
		display:none;
	}
}

@mixin clear_float(){
	content:"";display:block;clear:both;height:0;margin:0;padding:0;line-height:0;
}
@mixin clear_fix(){
	&:after{@include clear_float;}
}
@mixin pull_left(){
	display:inline;float:left;
}
@mixin pull_right(){
	display:inline;float:right;
}

@function tint($color,$tint){
	$tint:$tint*0.01;$ff:255;
	$r:$ff+$tint*(red($color)-$ff);
	$g:$ff+$tint*(green($color)-$ff);
	$b:$ff+$tint*(blue($color)-$ff);
	@if $r<0{$r:0}
	@if $g<0{$g:0}
	@if $b<0{$b:0}
	@return rgb($r,$g,$b);
}

@function ease($ease){
	@if $ease == l{$ease:linear;}
	@if $ease == e{$ease:ease;}
	@if $ease == i{$ease:ease-in;}
	@if $ease == o{$ease:ease-out;}
	@if $ease == io{$ease:ease-in-out;}
	
	@if $ease == ib{$ease:cubic-bezier(0.6,0.3,0.8,-1.0);}
	@if $ease == b or $ease == ob{$ease:cubic-bezier(0.2,2.0,0.4,0.7);}
	@if $ease == iob{$ease:cubic-bezier(0.3,-0.5,0.7,1.5);}
	
	@if $ease == ij{$ease:cubic-bezier(0.2,-10.0,0.8,-10.0);}
	@if $ease == j or $ease == oj{$ease:cubic-bezier(0.2,10.0,0.8,10.0);}
	@if $ease == ioj{$ease:cubic-bezier(0.2,-10.0,0.8,10.0);}
	
	@if $ease == u{$ease:cubic-bezier(0,.8,1,.2);}
	
	@return $ease;
}

@mixin opacity($trn...){
	-webkit-opacity:$trn;
	   -moz-opacity:$trn;
	    -ms-opacity:$trn;
	     -o-opacity:$trn;
	        opacity:$trn;
}

@function replace_values($vals,$dct){
	@if type-of($vals) == 'list' or type-of($vals) == 'arglist'{
		@for $i from 1 through length($vals){
			$v:nth($vals,$i);
			@if type-of($v) == 'list'{$vals:set-nth($vals,$i,replace_values($v,$dct));}
			@else if map-has-key($dct,$v){$vals:set-nth($vals,$i,map-get($dct,$v));}
		}
		@return $vals;
	}
	@else{
		@if map-has-key($dct,$vals){@return map-get($dct,$vals);}
		@else{@return $vals;}
	}
}

@function fill_4_values($vals){
	@if type-of($vals) == 'list' or type-of($vals) == 'arglist'{
		@if length($vals) == 1{
			$v:nth($vals,1);
			@return ($v,$v,$v,$v);
		}
		@if length($vals) == 2{
			$v1:nth($vals,1);
			$v2:nth($vals,2);
			@return ($v1,$v2,$v1,$v2);
		}
		@if length($vals) == 3{
			$v1:nth($vals,1);
			$v2:nth($vals,2);
			$v3:nth($vals,3);
			@return ($v1,$v2,$v3,$v2);
		}
		@return $vals;
	}
	@else{
		@return ($vals,$vals,$vals,$vals);
	}
}

@function cp_get_size_value($val){
	@if type-of($sizes) == 'map' {
		@if map-has-key($sizes,$val){$val:map-get($sizes,$val);}
	}
	$svals:(f:100%,a:auto,i:inherit,min:min-content,max:max-content,fit:fit-content);
	@if map-has-key($svals,$val){@return map-get($svals,$val);}
	@if type-of($val) == 'number' and unitless($val){
		@if global-variable-exists("sizeUnit"){@return $val*$sizeUnit;}
		@return $val * 1px;
	}
	@return $val;
}
@function cp_get_size_values($vals){
	@if type-of($vals) == 'list'{
		$rtn:false;
		@each $v in $vals{
			@if type-of($rtn) == 'list'{$rtn:append($rtn,cp_get_size_value($v));}
			@else if $rtn == false{$rtn:cp_get_size_value($v);}
			@else {$rtn:$rtn cp_get_size_value($v);}
		}
		@return $rtn;
	}
	@else{
		@return cp_get_size_value($vals);
	}
}

@function cp_get_color($clr){
	@return clr($clr);
}
@function cp_get_image($img){
	@if $img == n{@return none;}
	$clr:false;
	@if type-of($img) == 'list' {
		$clr:clr(nth($img,2));
		@if(str-slice($clr,0,1) == '#'){
			$clr:'%23' + str-slice($clr,1);
		}
		$img:nth($img,1);
	}
	@if type-of($images) == 'map' {
		@if map-has-key($images,$img){$img:map-get($images,$img);}
	}
	@if $clr{
		$img:$img + '?color=' + $clr;
	}
	@return url($img);
}
@function cp_get_font($fnt){
	@if type-of($fonts) == 'map' {
		@if map-has-key($fonts,$fnt){$fnt:map-get($fonts,$fnt);}
	}
	@return $fnt;
}

@function cp_get_breakpoint($bp){
	@return bp($bp);
}


@function bp($bp){
	@if type-of($breakpoints) == 'map' {
		@if map-has-key($breakpoints,$bp){$bp:map-get($breakpoints,$bp);}
	}
	@return $bp;
}


@function sel($sels){
	@if type-of($selectors) == 'map' {
		@if type-of($sels) == 'list' {
			$rtn:false;
			@each $sel in $sels{
				@if $rtn == false{$rtn:map-get($selectors,$sel);}
				@else {$rtn:$rtn + ',' + map-get($selectors,$sel);}
			}
			@return $rtn;
		}
		@if map-has-key($selectors,$sels){@return map-get($selectors,$sels);}
	}
	@return $sels;
}
@function clr($clr){
	@if type-of($clr) == 'color'{@return $clr;}
	@if $clr == n{@return transparent;}
	$trans:false;
	$tint:false;
	@if type-of($clr) =='list'{
		@if length($clr) >2{$trans:nth($clr,3);}
		@if length($clr) >1{$tint:nth($clr,2);@if $tint <= 1{$tint:$tint*100};}
		$clr:nth($clr,1);
	}
	@if type-of($colors) == 'map' {
		@if map-has-key($colors,$clr){$clr:map-get($colors,$clr);}
	}
	@if type-of($trans) == 'number'{@return rgba(tint($clr,$tint),$trans);}
	@if type-of($tint) == 'number'{@return tint($clr,$tint);}
	@return $clr;
}